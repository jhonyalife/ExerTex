# Benefícios do uso de um sistema de Controle de Versão

- Versionamento 

Problema sobre o desenvolvimento individual 

[] falta de capacidade de retornar as versões anteriores.
[] Versão não monitorada
[] Longo periodo em busca de solução

Problema relacionado a trabalhar com equipe 

[] Conflitos quando mais de um programador está trabalhando no mesmo arquivos
[] 'Bloqueio' do arquivo no desenvolvimento individual
[] Refação desnecessária

Solução -  Monitoramento das alterações dos arquivos 

---------------------------------------------------------------------------------------------------------

Github 

[] Repositorio remoto 


---------------------------------------------------------------------------------------------------------

# Git

**Para instalar no  Ubunut: sudo apt-get install git**

[] Diferente porque tira uma 'foto' instantâneo do status do arquivo
[] Armazena uma referência do arquivo
[] Se um arquivo não teve alterações não registra
[] Fluxo de momentos do projeto
[] Maioria das ações são locais
[] Integridades, todas as ações são registrados.
[] String de 40 posições que usa hexadecimal (0-9 a-f).
[] Armazena dados 
[] Repositorio local 

---------------------------------------------------------------------------------------------------------

Coisas principais a serem lembradas:

    [] Diretório de trabalho (Pasta na sua máquina virtual)
    [] Repositorio git
    [] .git : Banco de dados compactado com as alterações dos arquivos
    []  Stating: Área de preparação
    []  Compromisso: Commit

Modifica o arquivo --> Adicionar ao Staging --> comprometer o arquivo: Commit

---------------------------------------------------------------------------------------------------------
# Configuração Inicial para usar o git

Informações de sua identidade
config --global user.name
config --global user.email
config --global core.editor
config --list
---------------------------------------------------------------------------------------------------------

# Fazer e verificar commit 

git commit -m "mensagem"
git log - Para verificar

--------------------------------------------------------------------------------------------------------
# Adicionar alterações no arquivo 

git add nomeDoArquivo
git add

# Desfazer o add

git restore -staged "nomedoarquivo"

---------------------------------------------------------------------------------------------------------
# desfazer e navegar entre diferentes commits.

Através do comando git reset é possível desfazer e navegar entre diferentes commits.
Comandos reset:

reset:
Head > Commit
index > Stage
working Tree > Diretório

–hard: desfaz o commit e o stage, alterando o diretório.
–mixed: desfaz o commit e o stage, sem fazer alterações no diretório.
–soft: desfaz o commit, matendo o stage e não alterando o diretório.

---------------------------------------------------------------------------------------------------------

# Para ignorar um arquivo

-Criar um arquivo chamado ".gitignore"
-Colocar o nome do arquivo que deseja ser excluido dentro do ".gitignore"


---------------------------------------------------------------------------------------------------------
# Para comparar dois commits
-O comando git diff é capaz de trazer as diferenças entre o último commit e a versão atual dos arquivos.
-É possível visualizar as diferenças entre dois commits diferentes ao utilizar suas chaves após o comando git diff.
-Para salvar as mudanças em um novo arquivo, basta usar o comando git diff > nome-do-arquivo.patch.
-Pode-se adicionar mudanças com arquivos .patch a partir do comando git apply nome-do-arquivo.patch.

---------------------------------------------------------------------------------------------------------

# Criar um novo galho - branch 

- Através do comando git branch "nome-da-branch" criamos uma nova branch

# Trocar de branch - checkout

- Através do comando git checkout "nome-da-branch"
